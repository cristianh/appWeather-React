{"version":3,"sources":["Components/SearchInput.js","Helpers/apiWeather.js","Components/ImgWeather.js","Components/InfoWeatherCountry.js","Components/CountryWeather.js","Hook/useContrysData.js","App.js","index.js"],"names":["BusquedaInput","setSearchContry","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","value","onSubmit","type","onChange","target","onClick","countrysWeatherStack","country","a","url","encodeURI","fetch","result","json","data","minutely","respDataweather","map","cityweather","console","log","name","city_name","timezone","region","country_code","localtime","ob_time","temperature","temp","description","weather","wind_speed","wind_spd","humidity","rh","icon","ImgWeather","imgicon","image","setImage","useEffect","src","defaultProps","InfoWeatherCountry","countrysWeather","info","className","Date","toLocaleString","days","timestamp_utc","CountryWeather","loading","setCountrysWeather","then","countrysWeatherInfo","setTimeout","useContrysData","App","newconutry","setNewconutry","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abf68600.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport const BusquedaInput = ({setSearchContry}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('Colombia');\r\n\r\n    const handleChange= (e) =>{\r\n        setInputValue(e.target.value);\r\n       \r\n    }\r\n\r\n    const handleSubmit= (e) => {\r\n        e.preventDefault();\r\n        setSearchContry(value=>inputValue)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        Buscar:\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n                   value={inputValue}\r\n                   onChange={handleChange}\r\n            />\r\n            <button onClick={handleSubmit}>BUSCAR</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n","export const countrysWeatherStack = async (country) => {\r\n\r\n    const api_key = '616b5b3bd2fa4aaeb24cbeb05c2d91ae';\r\n    const url = `https://api.weatherbit.io/v2.0/current?lat=35.7796&lon=-78.6382&key=${api_key}&include=minutely&lang=es&city=${encodeURI(country)}`\r\n    \r\n    const result = await fetch(url);\r\n\r\n   \r\n        const {data,minutely} = await result.json();\r\n        \r\n\r\n        const respDataweather = data.map(cityweather =>{\r\n            console.log(cityweather);\r\n            return {\r\n                name: cityweather.city_name,\r\n                country: cityweather.timezone,\r\n                region: cityweather.country_code,\r\n                localtime: cityweather.ob_time,\r\n                temperature: cityweather.temp,\r\n                description:cityweather.weather.description,\r\n                wind_speed: cityweather.wind_spd,\r\n                humidity: cityweather.rh,\r\n                icon:cityweather.weather.icon,\r\n                minutely        \r\n            }\r\n\r\n            /* icon: \"c02d\" */\r\n                /* weather_icons: current.weather_icons[0],\r\n                humidity: current.humidity,\r\n                wind_speed: cityweather.wind_spd */\r\n\r\n        }) \r\n        console.log(typeof(respDataweather));\r\n        \r\n        return respDataweather;\r\n \r\n\r\n\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport const ImgWeather = ({ imgicon }) => {\r\n\r\n    const [image, setImage] = useState(imgicon);\r\n\r\n    useEffect(() => {\r\n        setImage(imgicon)\r\n    }, [imgicon]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <img src={`https://www.weatherbit.io/static/img/icons/${image}.png`} />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nImgWeather.defaultProps = {\r\n    imgicon: 'c01d'\r\n}\r\n","import React from 'react'\r\nimport { ImgWeather } from './ImgWeather'\r\n\r\n\r\nexport const InfoWeatherCountry = (data) => {\r\n\r\n\r\n\r\n    const { data: countrysWeather } = data\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                countrysWeather.map((info) => {\r\n                    return <div key={info.name} className=\"container\">\r\n                        <div className=\"Informacion\">\r\n                            <h2>{info.name} - {info.country}</h2>\r\n                            <h3>{info.region} - {new Date(info.localtime).toLocaleString()}</h3>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"Imagen-clima\">\r\n                            {info.description}<br />\r\n                            \r\n                            <ImgWeather key={info.icon} imgicon={info.icon} />\r\n                        </div>\r\n\r\n                        <div className=\"container-info\">\r\n                            <div className=\"container-info-row img-humedad animate__animated animate__bounceIn\"><h1>Humedad<br />{info.humidity}%</h1></div>\r\n                            <div className=\"container-info-row img-temperatura animate__animated animate__bounceIn\"><h1>Temperatura<br />{info.temperature}°C</h1></div>\r\n                            <div className=\"container-info-row img-Velocidad animate__animated animate__bounceIn\"><h1>Velocidad del viendo<br />{info.wind_speed} m/s</h1></div>\r\n                        </div>\r\n                        <h2>Proyeccion del clima en horas:</h2>\r\n                        <br />\r\n                        <div className=\"container-time-hours\">\r\n\r\n                            {info.minutely.map(days => {\r\n                                return <div className=\"container-hours-row\">{new Date(days.timestamp_utc).toLocaleString()}<br /><b>{days.temp}</b>°C </div>\r\n\r\n                            })}\r\n\r\n                        </div>\r\n                    </div>\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useContrysData } from '../Hook/useContrysData'\r\nimport { InfoWeatherCountry } from './InfoWeatherCountry';\r\n\r\nexport const CountryWeather = ({ country }) => {\r\n\r\n    const { data, loading } = useContrysData(country)\r\n\r\n    return (\r\n        <>\r\n           {loading? 'Cargando...':<InfoWeatherCountry data={data}/> }\r\n        </>\r\n    )\r\n}\r\n\r\nCountryWeather.defaultProps = {\r\n    country: 'Colombia'\r\n}","import React, {useState,useEffect} from 'react'\r\nimport { countrysWeatherStack } from '../Helpers/apiWeather'\r\n\r\nexport const useContrysData = (country) => {\r\n\r\n   \r\n\r\n    const [countrysWeather, setCountrysWeather] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        countrysWeatherStack(country).then((countrysWeatherInfo) => {\r\n\r\n            console.log(typeof(countrysWeatherInfo))\r\n            \r\n            setTimeout(() => {\r\n                setCountrysWeather({\r\n                    data:countrysWeatherInfo,\r\n                    loading:false\r\n                })\r\n            }, 3000);\r\n            \r\n        })\r\n\r\n      \r\n    }, [country])\r\n    \r\n    return countrysWeather;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { BusquedaInput } from './Components/SearchInput'\r\nimport { CountryWeather } from './Components/CountryWeather'\r\n\r\n\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const [newconutry, setNewconutry] = useState('Colombia');\r\n\r\n    return (\r\n        <>\r\n            <div  className=\"App\">\r\n                <BusquedaInput setSearchContry={setNewconutry} />\r\n                <hr />\r\n                <CountryWeather country={newconutry} />\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App }  from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}